{
  config,
  lib,
  pkgs,
  ...
}:
with lib; let
  cfg = config.services.nixicle.gitlab-runner;
in {
  options.services.nixicle.gitlab-runner = {
    enable = mkEnableOption "Enable gitlab runner";
  };

  config = mkIf cfg.enable {
    sops.secrets.gitlab_runner_env = {
      sopsFile = ../secrets.yaml;
    };

    boot.kernel.sysctl."net.ipv4.ip_forward" = true;
    services.gitlab-runner = {
      enable = true;
      settings = {
        concurrent = 10;
      };
      services = {
        nix = {
          executor = "docker";
          dockerPrivileged = true;

          authenticationTokenConfigFile = config.sops.secrets.gitlab_runner_env.path;
          limit = 10;

          # copied from nixpkgs' gitlab-runner module default
          dockerImage = "alpine";
          dockerVolumes = [
            "/nix/store:/nix/store:ro"
            "/nix/var/nix/db:/nix/var/nix/db"
            "/nix/var/nix/daemon-socket:/nix/var/nix/daemon-socket"
            "bazel-runtime:/tmp/.cache/bazel"
          ];
          dockerDisableCache = true;

          preBuildScript = pkgs.writeScript "setup-container" ''
            mkdir -p -m 0755 /nix/var/log/nix/drvs
            mkdir -p -m 0755 /nix/var/nix/gcroots
            mkdir -p -m 0755 /nix/var/nix/profiles
            mkdir -p -m 0755 /nix/var/nix/temproots
            mkdir -p -m 0755 /nix/var/nix/userpool
            mkdir -p -m 1777 /nix/var/nix/gcroots/per-user
            mkdir -p -m 1777 /nix/var/nix/profiles/per-user
            mkdir -p -m 0755 /nix/var/nix/profiles/per-user/root
            mkdir -p -m 0700 "$HOME/.nix-defexpr"

            . ${pkgs.nix}/etc/profile.d/nix.sh

            # nix-env installs in NIX_PROFILE or /nix/var/nix/profiles/default (see manpage)
            ${pkgs.nix}/bin/nix-env -i ${
              lib.concatStringsSep " " (
                with pkgs; [
                  nix
                  cacert
                  git
                  openssh
                ]
              )
            }

            cp "${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt" /etc/ssl/certs/ca-certificates.crt
            mkdir -p ~/.config/nix
            echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

          '';

          environmentVariables = let
            paths = [
              "/nix/var/nix/profiles/default/bin"
              "/nix/var/nix/profiles/default/sbin"
              "/nix/var/nix/profiles/per-user/root/profile/bin"
              "/nix/var/nix/profiles/per-user/ubuntu/profile/bin"
              "/bin"
              "/sbin"
              "/usr/bin"
              "/usr/sbin"
            ];
          in {
            DOCKER_DRIVER = "overlay2";
            ENV = "/etc/profile";
            USER = "root";
            NIX_REMOTE = "daemon";
            # This is one tricky part: to speed up the build process, we mount the host nix store in the docker container but as docker images
            # contain symlinks towards the /nix store, those symlinks can be broken if they dont exist in the host store
            # For instance the docker image generated by:
            # - nix build github:nixos/nix#dockerImage : has /bin/sh -> /nix/store/.../bash
            #
            # /nix/var/nix/profiles/default/bin matches nix-env for root: this works fine on a nixos-deployed runner but
            # we also have ubuntu-based machines
            # /nix/var/nix/profiles/per-user/ubuntu/profile/bin
            PATH = lib.concatStringsSep ":" paths;
            # This is the default in the gitlab-runner module ?!
            # NIX_SSL_CERT_FILE = "/nix/var/nix/profiles/default/etc/ssl/certs/ca-bundle.crt";
            NIX_SSL_CERT_FILE = "${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt";
            SSL_CERT_FILE = "${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt";
          };
        };
        # runner for building in docker via host's nix-daemon
        # nix store will be readable in runner, might be insecure
        # nix = {
        #   authenticationTokenConfigFile = config.sops.secrets.gitlab_runner_env.path;
        #   dockerImage = "alpine";
        #   dockerVolumes = [
        #     "/nix/store:/nix/store:ro"
        #     "/nix/var/nix/db:/nix/var/nix/db:ro"
        #     "/nix/var/nix/daemon-socket:/nix/var/nix/daemon-socket:ro"
        #   ];
        #   dockerDisableCache = true;
        #   preBuildScript = pkgs.writeScript "setup-container" ''
        #     mkdir -p -m 0755 /nix/var/log/nix/drvs
        #     mkdir -p -m 0755 /nix/var/nix/gcroots
        #     mkdir -p -m 0755 /nix/var/nix/profiles
        #     mkdir -p -m 0755 /nix/var/nix/temproots
        #     mkdir -p -m 0755 /nix/var/nix/userpool
        #     mkdir -p -m 1777 /nix/var/nix/gcroots/per-user
        #     mkdir -p -m 1777 /nix/var/nix/profiles/per-user
        #     mkdir -p -m 0755 /nix/var/nix/profiles/per-user/root
        #     mkdir -p -m 0700 "$HOME/.nix-defexpr"
        #
        #     . ${pkgs.nix}/etc/profile.d/nix.sh
        #
        #     ${pkgs.nix}/bin/nix-env -i ${concatStringsSep " " (with pkgs; [nix cacert git openssh])}
        #
        #     ${pkgs.nix}/bin/nix-channel --add https://nixos.org/channels/nixpkgs-unstable
        #     ${pkgs.nix}/bin/nix-channel --update nixpkgs
        #   '';
        #   environmentVariables = {
        #     ENV = "/etc/profile";
        #     USER = "root";
        #     NIX_REMOTE = "daemon";
        #     PATH = "/nix/var/nix/profiles/default/bin:/nix/var/nix/profiles/default/sbin:/bin:/sbin:/usr/bin:/usr/sbin";
        #     NIX_SSL_CERT_FILE = "/nix/var/nix/profiles/default/etc/ssl/certs/ca-bundle.crt";
        #   };
        # };
        # runner for building docker images
        # docker-images = {
        #   authenticationTokenConfigFile = config.sops.secrets.gitlab_runner_env.path;
        #   limit = 10;
        #
        #   dockerImage = "docker:stable";
        #   dockerVolumes = [
        #     "/var/run/docker.sock:/var/run/docker.sock"
        #   ];
        # };
        # runner for everything else
        default = {
          authenticationTokenConfigFile = config.sops.secrets.gitlab_runner_env.path;
          limit = 10;
          dockerImage = "debian:stable";
        };
      };
    };
  };
}
